// Store Configuration Guide for Mindload International IAP Setup
// Complete guide for Apple App Store and Google Play Store configuration

class StoreConfigurationGuide {
  // ========================================
  // APPLE APP STORE CONNECT SETUP
  // ========================================

  static const String appleSetupGuide = '''
APPLE APP STORE CONNECT - INTERNATIONAL IAP SETUP:

A) PAYOUT & LISTING READINESS:
   1. Login to App Store Connect
   2. Go to Agreements, Tax, and Banking
   3. Activate "Paid Apps" agreement
   4. Complete banking information (international bank supported)
   5. Complete tax information for all territories
   6. Set support email: support@mindload.com
   7. Set support URL: https://mindload.com/support

B) TERRITORIES & LOCAL CURRENCY:
   1. Go to App Information > Pricing and Availability
   2. Enable availability in ALL allowed territories
   3. Apply Price Schedule to all regions (Apple localizes prices automatically)
   4. Verify store pages show localized prices in local currencies
   
C) PRODUCT CATALOG SETUP:
   Create these exact products in App Store Connect:

   1. SUBSCRIPTION - Pro Monthly
      - Product ID: com.mindload.pro.monthly
      - Type: Auto-renewable subscription
      - Subscription Group: Mindload Pro
      - Base Price: \$6.99/month
      - Introductory Offer: \$2.99 for 1 month, then \$6.99/month
      - Localization: Auto-generated by Apple
      - Review Notes: "Monthly Pro subscription with intro pricing"

   2. SUBSCRIPTION - Pro Annual  
      - Product ID: com.mindload.pro.annual
      - Type: Auto-renewable subscription
      - Subscription Group: Mindload Pro (same as monthly)
      - Base Price: \$49.99/year
      - Introductory Offer: \$39.99 for 1 year, then \$49.99/year (optional, flag-controlled)
      - Localization: Auto-generated by Apple
      - Review Notes: "Annual Pro subscription with optional intro pricing"

   3. CONSUMABLE - Starter Pack
      - Product ID: com.mindload.credits.starter100
      - Type: Consumable
      - Price: \$1.99
      - Review Notes: "100 credit pack for immediate use"

D) STOREKIT 2 CONFIGURATION:
   - Enable StoreKit 2 in Xcode project
   - Configure Introductory Offers (one per subscription group)
   - Set up StoreKit configuration file for testing
   - Test with Sandbox environment before production

E) COMPLIANCE CHECKLIST:
   ✓ Paid Apps agreement active
   ✓ Banking information complete for all territories  
   ✓ Tax information complete for all territories
   ✓ All three products approved and live
   ✓ Introductory pricing configured correctly
   ✓ Subscription group configured (Mindload Pro)
   ✓ Price localization enabled for all territories
   ✓ App metadata localized for major markets
   ✓ Support email and URL configured
''';

  // ========================================
  // GOOGLE PLAY CONSOLE SETUP
  // ========================================

  static const String googleSetupGuide = '''
GOOGLE PLAY CONSOLE - INTERNATIONAL IAP SETUP:

A) PAYOUT & LISTING READINESS:
   1. Login to Google Play Console
   2. Go to Setup > Payments Profile  
   3. Activate Payments Profile and Merchant account
   4. Complete business information
   5. Complete tax information for all countries
   6. Set developer contact email: developer@mindload.com
   7. Verify merchant account is active

B) TERRITORIES & LOCAL CURRENCY:
   1. Go to Setup > App Content
   2. Publish to ALL allowed countries and regions
   3. Go to Monetize > Products > Subscriptions/In-app products
   4. Use Pricing Templates for automatic currency localization
   5. Enable availability in all countries where app is published
   6. Verify store pages show localized prices in local currencies

C) PRODUCT CATALOG SETUP:
   Create these exact products in Google Play Console:

   1. SUBSCRIPTION - Pro Monthly
      - Product ID: com.mindload.pro.monthly
      - Type: Subscription
      - Billing Period: Monthly
      - Base Price: \$6.99/month
      - Introductory Price: \$2.99 for 1 month (one-cycle intro)
      - Free Trial: None
      - Grace Period: 3 days
      - Account Hold: 30 days

   2. SUBSCRIPTION - Pro Annual
      - Product ID: com.mindload.pro.annual  
      - Type: Subscription
      - Billing Period: Yearly
      - Base Price: \$49.99/year
      - Introductory Price: \$39.99 for 1 year (optional, flag-controlled)
      - Free Trial: None
      - Grace Period: 3 days
      - Account Hold: 30 days

   3. IN-APP PRODUCT - Starter Pack
      - Product ID: com.mindload.credits.starter100
      - Type: Managed product (consumed by app)
      - Price: \$1.99
      - Description: "100 credits for immediate use"

D) PLAY BILLING API 7+ CONFIGURATION:
   - Update to Play Billing Library 7+
   - Enable Real-time Developer Notifications (RTDN)
   - Set up Google Cloud Pub/Sub topic
   - Configure webhook endpoint for subscription events
   - Test with internal testing before production

E) COMPLIANCE CHECKLIST:
   ✓ Payments Profile and Merchant account active
   ✓ Business and tax information complete for all countries
   ✓ All three products approved and published
   ✓ Pricing templates applied to all countries
   ✓ One-cycle intro pricing configured correctly
   ✓ Real-time Developer Notifications enabled
   ✓ Pub/Sub topic configured for webhooks
   ✓ Play Billing API 7+ integrated
   ✓ App published in all target countries
   ✓ Developer contact information configured
''';

  // ========================================
  // FIREBASE CLOUD FUNCTIONS SETUP
  // ========================================

  static const String firebaseCloudFunctionsGuide = '''
FIREBASE CLOUD FUNCTIONS - WEBHOOK HANDLERS:

A) APPLE WEBHOOK HANDLER:
   Function: processAppleWebhook
   Trigger: HTTPS endpoint
   Purpose: Handle Apple App Store Server Notifications
   Endpoint: https://us-central1-<project-id>.cloudfunctions.net/processAppleWebhook
   
   Events handled:
   - SUBSCRIBED (new subscription)
   - DID_RENEW (subscription renewal)
   - EXPIRED (subscription expired)
   - DID_FAIL_TO_RENEW (renewal failed)
   - REFUND (subscription refunded)
   - REVOKE (subscription revoked)

B) GOOGLE WEBHOOK HANDLER:
   Function: processGoogleWebhook
   Trigger: Pub/Sub topic (rtdn-play-billing)
   Purpose: Handle Google Play Real-time Developer Notifications
   Topic: projects/<project-id>/topics/rtdn-play-billing
   
   Events handled:
   - SUBSCRIPTION_PURCHASED (new subscription)
   - SUBSCRIPTION_RENEWED (subscription renewal)  
   - SUBSCRIPTION_CANCELED (user canceled)
   - SUBSCRIPTION_EXPIRED (subscription expired)
   - SUBSCRIPTION_REVOKED (subscription revoked)
   - SUBSCRIPTION_PAUSED (subscription paused)
   - SUBSCRIPTION_RESUMED (subscription resumed)

C) VERIFICATION FUNCTIONS:
   - verifyAppleReceipt: Server-side Apple receipt verification
   - verifyGooglePurchase: Server-side Google Play purchase verification
   - updateUserEntitlement: Idempotent entitlement updates
   - processCreditRefill: Handle credit quota refills
   - recordPurchaseEvent: Audit trail for all transactions

D) SECURITY IMPLEMENTATION:
   - JWT verification for Apple notifications
   - Pub/Sub message verification for Google notifications
   - Idempotent event processing (prevent duplicate processing)
   - Rate limiting on webhook endpoints
   - Error handling and retry logic
   - Audit logging for all transactions
''';

  // ========================================
  // TESTING AND VALIDATION
  // ========================================

  static const String testingGuide = '''
TESTING AND VALIDATION CHECKLIST:

A) APPLE TESTING:
   ✓ Configure StoreKit Configuration file
   ✓ Test with Sandbox users (different Apple ID)
   ✓ Verify intro offers work once per user
   ✓ Test subscription management (upgrade/downgrade/cancel)
   ✓ Test restore purchases functionality
   ✓ Verify webhook events are processed correctly
   ✓ Test in multiple territories with different currencies

B) GOOGLE TESTING:
   ✓ Use internal testing track for validation
   ✓ Test with license testing accounts
   ✓ Verify intro offers work once per user
   ✓ Test subscription management (pause/resume/cancel)
   ✓ Test purchase acknowledgment flow
   ✓ Verify RTDN webhook events are processed
   ✓ Test in multiple countries with different currencies

C) FIREBASE TESTING:
   ✓ Test all Cloud Functions locally with emulator
   ✓ Validate webhook signature verification
   ✓ Test idempotent event processing
   ✓ Verify user entitlement updates work correctly
   ✓ Test credit refill and quota management
   ✓ Validate error handling and retry logic

D) PRODUCTION VALIDATION:
   ✓ All products visible in production stores
   ✓ Prices display in local currencies correctly
   ✓ Intro offers apply correctly for eligible users
   ✓ Webhook processing working in production
   ✓ User entitlements sync correctly across devices
   ✓ Subscription management links work correctly
   ✓ Analytics and telemetry tracking purchases
''';

  // ========================================
  // MAINTENANCE AND MONITORING
  // ========================================

  static const String maintenanceGuide = '''
ONGOING MAINTENANCE AND MONITORING:

A) STORE MONITORING:
   - Monitor App Store Connect for policy updates
   - Monitor Google Play Console for policy changes
   - Track app review feedback related to payments
   - Monitor conversion rates and pricing effectiveness
   - Track territory-specific performance metrics

B) FIREBASE MONITORING:
   - Monitor Cloud Functions execution and errors
   - Track webhook processing success rates
   - Monitor Firestore read/write costs
   - Set up alerts for failed payment processing
   - Monitor user entitlement sync issues

C) COMPLIANCE MONITORING:
   - Regular review of store policies and compliance
   - Monitor tax requirement changes in different territories
   - Track banking and payout issues
   - Review and update privacy policies as needed
   - Monitor for subscription management issues

D) PERFORMANCE OPTIMIZATION:
   - Optimize Cloud Functions cold start times
   - Review and optimize Firestore queries
   - Monitor and optimize webhook processing latency
   - Track and optimize user experience metrics
   - Regular security audits of payment processing
''';

  // ========================================
  // TROUBLESHOOTING GUIDE
  // ========================================

  static const String troubleshootingGuide = '''
COMMON ISSUES AND TROUBLESHOOTING:

A) APPLE ISSUES:
   Problem: Intro offers not showing
   Solution: Check StoreKit configuration and user eligibility
   
   Problem: Receipt verification failing
   Solution: Verify Apple API credentials in Secret Manager
   
   Problem: Webhooks not received
   Solution: Check Apple notification URL configuration

B) GOOGLE ISSUES:
   Problem: Products not loading
   Solution: Verify Play Console product status and app version
   
   Problem: Purchase verification failing
   Solution: Check Google service account permissions
   
   Problem: RTDN not working
   Solution: Verify Pub/Sub topic and Cloud Function configuration

C) FIREBASE ISSUES:
   Problem: User entitlements not updating
   Solution: Check Firestore security rules and Cloud Function logs
   
   Problem: Credits not refilling
   Solution: Verify credit refill logic and timing
   
   Problem: High costs
   Solution: Optimize Firestore queries and reduce unnecessary reads

D) GENERAL ISSUES:
   Problem: Restore purchases not working
   Solution: Verify server-side entitlement sync logic
   
   Problem: Multiple subscriptions active
   Solution: Implement proper subscription group management
   
   Problem: Pricing display issues
   Solution: Verify product price loading and display logic
''';

  // Get all guides as a comprehensive map
  static Map<String, String> getAllGuides() {
    return {
      'apple_setup': appleSetupGuide,
      'google_setup': googleSetupGuide,
      'firebase_functions': firebaseCloudFunctionsGuide,
      'testing': testingGuide,
      'maintenance': maintenanceGuide,
      'troubleshooting': troubleshootingGuide,
    };
  }
}

// Product Configuration Validation
class ProductConfigurationValidator {
  // Validate all required products are configured correctly
  static Map<String, bool> validateProductConfiguration() {
    return {
      'apple_pro_monthly_configured': false, // Update after Apple setup
      'apple_pro_annual_configured': false, // Update after Apple setup
      'apple_starter_pack_configured': false, // Update after Apple setup
      'google_pro_monthly_configured': false, // Update after Google setup
      'google_pro_annual_configured': false, // Update after Google setup
      'google_starter_pack_configured': false, // Update after Google setup
      'firebase_webhooks_configured': false, // Update after Firebase setup
      'firebase_secrets_configured': false, // Update after secrets setup
    };
  }

  // Get product configuration status
  static Map<String, dynamic> getConfigurationStatus() {
    return {
      'timestamp': DateTime.now().toUtc().toIso8601String(),
      'validation': validateProductConfiguration(),
      'required_products': [
        'com.mindload.pro.monthly',
        'com.mindload.pro.annual',
        'com.mindload.credits.starter100',
      ],
      'setup_completion': {
        'apple_store': '0/8 steps completed',
        'google_play': '0/9 steps completed',
        'firebase_backend': '0/6 steps completed',
      },
    };
  }
}
